commit fd0d86e8cd6d787dd09af0bbff521d391eeffff0
Author: Pascal Diehm <pdiehm8@gmail.com>
Date:   Sun Mar 2 23:02:48 2025 +0100

    Revert "Let network module handle ipv4 and ipv6 simultaneously"
    
    This reverts commit db943dae9817d989031cf06309d759f8a7416284.

diff --git a/include/modules/network.hpp b/include/modules/network.hpp
index df0ba9c3..4a84b02f 100644
--- a/include/modules/network.hpp
+++ b/include/modules/network.hpp
@@ -50,6 +50,7 @@ class Network : public ALabel {
   std::optional<std::pair<unsigned long long, unsigned long long>> readBandwidthUsage();
 
   int ifid_;
+  sa_family_t family_;
   struct sockaddr_nl nladdr_ = {0};
   struct nl_sock* sock_ = nullptr;
   struct nl_sock* ev_sock_ = nullptr;
diff --git a/src/modules/network.cpp b/src/modules/network.cpp
index 393b4296..0bbea631 100644
--- a/src/modules/network.cpp
+++ b/src/modules/network.cpp
@@ -80,6 +80,7 @@ waybar::modules::Network::readBandwidthUsage() {
 waybar::modules::Network::Network(const std::string &id, const Json::Value &config)
     : ALabel(config, "network", id, DEFAULT_FORMAT, 60),
       ifid_(-1),
+      family_(config["family"] == "ipv6" ? AF_INET6 : AF_INET),
       efd_(-1),
       ev_fd_(-1),
       want_route_dump_(false),
@@ -140,7 +141,12 @@ waybar::modules::Network::~Network() {
     close(efd_);
   }
   if (ev_sock_ != nullptr) {
-    nl_socket_drop_memberships(ev_sock_, RTNLGRP_LINK, RTNLGRP_IPV4_IFADDR, RTNLGRP_IPV6_IFADDR);
+    nl_socket_drop_membership(ev_sock_, RTNLGRP_LINK);
+    if (family_ == AF_INET) {
+      nl_socket_drop_membership(ev_sock_, RTNLGRP_IPV4_IFADDR);
+    } else {
+      nl_socket_drop_membership(ev_sock_, RTNLGRP_IPV6_IFADDR);
+    }
     nl_close(ev_sock_);
     nl_socket_free(ev_sock_);
   }
@@ -155,7 +161,7 @@ void waybar::modules::Network::createEventSocket() {
   nl_socket_disable_seq_check(ev_sock_);
   nl_socket_modify_cb(ev_sock_, NL_CB_VALID, NL_CB_CUSTOM, handleEvents, this);
   nl_socket_modify_cb(ev_sock_, NL_CB_FINISH, NL_CB_CUSTOM, handleEventsDone, this);
-  auto groups = RTMGRP_LINK | RTMGRP_IPV4_IFADDR | RTMGRP_IPV6_IFADDR;
+  auto groups = RTMGRP_LINK | (family_ == AF_INET ? RTMGRP_IPV4_IFADDR : RTMGRP_IPV6_IFADDR);
   nl_join_groups(ev_sock_, groups);  // Deprecated
   if (nl_connect(ev_sock_, NETLINK_ROUTE) != 0) {
     throw std::runtime_error("Can't connect network socket");
@@ -163,9 +169,18 @@ void waybar::modules::Network::createEventSocket() {
   if (nl_socket_set_nonblocking(ev_sock_)) {
     throw std::runtime_error("Can't set non-blocking on network socket");
   }
-  nl_socket_add_memberships(ev_sock_, RTNLGRP_LINK, RTNLGRP_IPV4_IFADDR, RTNLGRP_IPV6_IFADDR, 0);
+  nl_socket_add_membership(ev_sock_, RTNLGRP_LINK);
+  if (family_ == AF_INET) {
+    nl_socket_add_membership(ev_sock_, RTNLGRP_IPV4_IFADDR);
+  } else {
+    nl_socket_add_membership(ev_sock_, RTNLGRP_IPV6_IFADDR);
+  }
   if (!config_["interface"].isString()) {
-    nl_socket_add_memberships(ev_sock_, RTNLGRP_IPV4_ROUTE, RTNLGRP_IPV6_ROUTE, 0);
+    if (family_ == AF_INET) {
+      nl_socket_add_membership(ev_sock_, RTNLGRP_IPV4_ROUTE);
+    } else {
+      nl_socket_add_membership(ev_sock_, RTNLGRP_IPV6_ROUTE);
+    }
   }
 
   efd_ = epoll_create1(EPOLL_CLOEXEC);
@@ -516,6 +531,10 @@ int waybar::modules::Network::handleEvents(struct nl_msg *msg, void *data) {
         return NL_OK;
       }
 
+      if (ifa->ifa_family != net->family_) {
+        return NL_OK;
+      }
+
       // We ignore address mark as scope for the link or host,
       // which should leave scope global addresses.
       if (ifa->ifa_scope >= RT_SCOPE_LINK) {
@@ -572,7 +591,6 @@ int waybar::modules::Network::handleEvents(struct nl_msg *msg, void *data) {
       // to find the interface used to reach the outside world
 
       struct rtmsg *rtm = static_cast<struct rtmsg *>(NLMSG_DATA(nh));
-      int family = rtm->rtm_family;
       ssize_t attrlen = RTM_PAYLOAD(nh);
       struct rtattr *attr = RTM_RTA(rtm);
       bool has_gateway = false;
@@ -600,14 +618,14 @@ int waybar::modules::Network::handleEvents(struct nl_msg *msg, void *data) {
              * If someone ever needs to figure out the gateway address as well,
              * it's here as the attribute payload.
              */
-            inet_ntop(family, RTA_DATA(attr), temp_gw_addr, sizeof(temp_gw_addr));
+            inet_ntop(net->family_, RTA_DATA(attr), temp_gw_addr, sizeof(temp_gw_addr));
             has_gateway = true;
             break;
           case RTA_DST: {
             /* The destination address.
              * Should be either missing, or maybe all 0s.  Accept both.
              */
-            const uint32_t nr_zeroes = (family == AF_INET) ? 4 : 16;
+            const uint32_t nr_zeroes = (net->family_ == AF_INET) ? 4 : 16;
             unsigned char c = 0;
             size_t dstlen = RTA_PAYLOAD(attr);
             if (dstlen != nr_zeroes) {
@@ -699,6 +717,7 @@ void waybar::modules::Network::askForStateDump(void) {
   };
 
   if (want_route_dump_) {
+    rt_hdr.rtgen_family = family_;
     nl_send_simple(ev_sock_, RTM_GETROUTE, NLM_F_DUMP, &rt_hdr, sizeof(rt_hdr));
     want_route_dump_ = false;
     dump_in_progress_ = true;
@@ -709,6 +728,7 @@ void waybar::modules::Network::askForStateDump(void) {
     dump_in_progress_ = true;
 
   } else if (want_addr_dump_) {
+    rt_hdr.rtgen_family = family_;
     nl_send_simple(ev_sock_, RTM_GETADDR, NLM_F_DUMP, &rt_hdr, sizeof(rt_hdr));
     want_addr_dump_ = false;
     dump_in_progress_ = true;
