name: Verify
on: push

jobs:
  verify:
    name: Verify
    runs-on: self-hosted

    steps:
      - uses: actions/checkout@v5.0.0

      - uses: cachix/install-nix-action@v31.6.0
        with:
          extra_nix_config: |
            experimental-features = flakes nix-command pipe-operators
            substituters = http://nixcache

      - name: Build
        if: ${{ !cancelled() }}
        run: |
          while read -r MACHINE; do
            timeout 1h nix build ".#nixosConfigurations.$MACHINE.config.system.build.toplevel" || exit 1
          done < <(jq -r "keys[]" machines.json)

      - name: Check default.nix imports
        if: ${{ !cancelled() }}
        run: |
          FAILED=0
          while read -r DEFAULT; do
            echo "Checking $DEFAULT"
            USED="$(nix eval --json --file "$DEFAULT" imports | jq -r ".[]")"

            while read -r MODULE; do
              if grep -Fq "$MODULE" <<<"$USED"; then
                echo "  - $MODULE"
              else
                echo "  - $MODULE (missing)"
                FAILED=1
              fi
            done < <(ls "$(dirname "$DEFAULT")" | grep -Fv default.nix)
          done < <(find . -path ./overlay -prune -o -name default.nix -print)

          ((! FAILED))

      - name: Check unused resources
        if: ${{ !cancelled() }}
        run: |
          USED="$(find . \( -path ./.git -o -path ./resources \) -prune -o -type f -exec grep resources "{}" \;)"
          FAILED=0

          while read -r FILE; do
            if grep -Fq "$FILE" <<<"$USED"; then
              echo "Checking $FILE"
            else
              echo "Checking $FILE (failed)"
              FAILED=1
            fi
          done < <(find resources -path resources/secrets -prune -o -type f -print)

          ((! FAILED))

      - name: Lint nix
        if: ${{ !cancelled() }}
        run: | # TODO: Add statix check once statix supports pipe operators
          FAILED=0
          while read -r FILE; do
            echo "Checking $FILE"
            DIAGNOSTICS="$(nix run nixpkgs#nil -- diagnostics "$FILE")"

            if [ -n "$DIAGNOSTICS" ]; then
              echo "$DIAGNOSTICS"
              FAILED=1
            fi
          done < <(find . -name "*.nix")

          ((! FAILED))

      - name: Lint shell
        if: ${{ !cancelled() }}
        run: |
          FAILED=0
          while read -r FILE; do
            echo "Checking $FILE"
            nix run nixpkgs#shellcheck -- "$FILE" || FAILED=1
          done < <(find . -name "*.sh")

          ((! FAILED))

      - name: Cleanup
        if: ${{ always() }}
        run: sudo rm -rf /nix
